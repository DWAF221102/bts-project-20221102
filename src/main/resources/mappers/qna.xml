<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.btsproject.btsproject20221102.repository.qna.QnaRepository">
    <resultMap id="qna_img_files" type="com.btsproject.btsproject20221102.domain.QnaImgFile">
        <result property="id" column="img_id"></result>
        <result property="qna_board_id" column="qna_board_id"></result>
        <result property="origin_name" column="origin_name"></result>
        <result property="temp_name" column="temp_name"></result>
    </resultMap>
    <resultMap id="qna" type="com.btsproject.btsproject20221102.domain.Qna">
        <result property="id" column="id"></result>
        <result property="menu_id" column="menu_id"></result>
        <result property="category_id" column="category_id"></result>
        <result property="category_sub_id" column="category_sub_id"></result>
        <result property="status_id" column="status_id"></result>
        <result property="user_id" column="user_id"></result>
        <result property="title" column="title"></result>
        <result property="content" column="content"></result>
        <result property="price" column="price"></result>
        <result property="create_date" column="create_date"></result>
        <result property="update_date" column="update_date"></result>
        <collection property="qna_img_files" javaType="list" resultMap="qna_img_files"></collection>
    </resultMap>
    <resultMap id="qnaArticle" type="com.btsproject.btsproject20221102.domain.QnaArticle">
        <result property="id" column="id"></result>
        <result property="user_id" column="user_id"></result>
        <result property="menu_id" column="menu_id"></result>
        <result property="category_name" column="category_name"></result>
        <result property="subcategory_name" column="subcategory_name"></result>
        <result property="status" column="status"></result>
        <result property="nickname" column="nickname"></result>
        <result property="title" column="title"></result>
        <result property="info" column="info"></result>
        <result property="want_info" column="want_info"></result>
        <result property="price" column="price"></result>
        <result property="user_img" column="user_img"></result>
        <result property="like_count" column="like_count"></result>
        <result property="view_count" column="view_count"></result>
        <result property="create_date" column="create_date"></result>
        <result property="update_date" column="update_date"></result>
        <collection property="qna_img_files" javaType="list" resultMap="qna_img_files"></collection>
    </resultMap>

    <resultMap id="qnaUpdateArticle" type="com.btsproject.btsproject20221102.domain.QnaUpdateArticle">
        <result property="id" column="id"></result>
        <result property="user_id" column="user_id"></result>
        <result property="menu_id" column="menu_id"></result>
        <result property="category_name" column="category_name"></result>
        <result property="category_id" column="category_id"></result>
        <result property="subcategory_name" column="subcategory_name"></result>
        <result property="category_sub_id" column="category_sub_id"></result>
        <result property="status" column="status"></result>
        <result property="nickname" column="nickname"></result>
        <result property="title" column="title"></result>
        <result property="info" column="info"></result>
        <result property="want_info" column="want_info"></result>
        <result property="price" column="price"></result>
        <result property="user_img" column="user_img"></result>
        <result property="like_count" column="like_count"></result>
        <result property="view_count" column="view_count"></result>
        <result property="create_date" column="create_date"></result>
        <result property="update_date" column="update_date"></result>
        <collection property="qna_update_img_files" javaType="list" resultMap="qna_update_img_files"></collection>
    </resultMap>

    <resultMap id="qna_update_img_files" type="com.btsproject.btsproject20221102.domain.QnaUpdateImgFile">
        <result property="id" column="img_id"></result>
        <result property="qna_board_id" column="qna_board_id"></result>
        <result property="origin_name" column="origin_name"></result>
        <result property="temp_name" column="temp_name"></result>
    </resultMap>




    <insert id="saveQna" parameterType="com.btsproject.btsproject20221102.domain.Qna" useGeneratedKeys="true" keyProperty="id">
<!--       쿼리 어떻게 짜야되는지 질문-->
        insert into
            qna_board_mst
        values(
        0,
<!--        #{menu_id},-->
        1,
        #{category_id},
        #{category_sub_id},
<!--        #{status_id},-->
        1,
        #{user_id},
        #{title},
        #{info},
        #{want_info},
        #{price},
        1,
        now(),
        now()
        );
    </insert>

    <insert id="saveImgFiles" parameterType="java.util.List">
        insert into
            qna_board_img
        values
        <foreach item="file" collection="list" separator=",">
            (
                0,
                #{file.qna_board_id},
                #{file.origin_name},
                #{file.temp_name},
                now(),
                now()
            )
        </foreach>


    </insert>

<!--    Q&A 질문자 별점-->
    <insert id="questionerModal"
            parameterType="com.btsproject.btsproject20221102.domain.QnaQuestionerModal">

        insert into
            score_mst(id, board_id, score, create_date, update_date)
        values(
        0,
        #{board_id},
        #{score},
        now(),
        now()
        )
    </insert>


    <select id="infoQna" parameterType="Integer" resultMap="qnaArticle">
        select
            qbm.id,
            qbm.user_id,
            qbm.menu_id,
            cd.category_name,
            sd.subcategory_name,
            sm.status,
            um.nickname,
            qbm.title,
            qbm.info,
            qbm.want_info,
            qbm.price,
            um.user_img,
            ifnull(lm.like_count,0),
<!--            ifnull(qbm.view_count, 0),-->
            qbm.view_count,
            qbi.temp_name,
            qbm.create_date,
            qbm.update_date
        from
            qna_board_mst qbm
            LEFT OUTER JOIN user_mst um ON(um.id = qbm.user_id)
            LEFT OUTER JOIN category_dtl cd ON(cd.id = qbm.category_id)
            LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = qbm.category_sub_id)
            LEFT OUTER JOIN status_mst sm ON(sm.id = qbm.status_id)
            LEFT OUTER JOIN qna_board_img qbi ON(qbi.qna_board_id = qbm.id)
            LEFT OUTER JOIN (select
                                board_id,
                                COUNT(*) AS like_count
                            from
                                like_mst
                            GROUP BY
                                board_id) lm ON (lm.board_id = qbm.id)
        where
            qbm.id = #{id}
    </select>

    <select id="qnaLoadBoard"
            parameterType="hashmap"
            resultType="com.btsproject.btsproject20221102.domain.QnaLoadList"
    >
    select
        qbm.user_id,
        ifnull(um.nickname, 0),
        ifnull(um.user_img, 0),
        qbm.id,
        qbm.title,
        qbm.price,
        sm.status,
<!--        매칭 후 상태에 따라 값을 바꾸도록 해야함. -->
<!--        3,-->
        ifnull(qbm.view_count, 0),
        qbm.create_date,
        cd.category_name,
        sd.subcategory_name,
        ifnull(cm.comment_count,0),
        ifnull(rm.recomment_count,0),
        ifnull(lm.like_count,0),
        ifnull(pc.total_count,0)
    from
        qna_board_mst qbm
        LEFT OUTER JOIN user_mst um ON(um.id = qbm.user_id)
        LEFT OUTER JOIN category_dtl cd ON(cd.id = qbm.category_id)
        LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = qbm.category_sub_id)
        LEFT OUTER JOIN status_mst sm ON(sm.id = qbm.status_id)
        LEFT OUTER JOIN (select
                            board_id,
                            COUNT(*) AS comment_count
                        from
                            comment_mst
                        GROUP BY
                            board_id) cm ON (cm.board_id = qbm.id)
    LEFT OUTER JOIN (select
                            comment_id,
                            COUNT(*) AS recomment_count
                        from
                            recomment_mst
                        GROUP BY
                            comment_id) rm ON (rm.comment_id = cm.board_id)
    LEFT OUTER JOIN (select
                        board_id,
                        COUNT(*) AS like_count
                    from
                        like_mst
                    GROUP BY
                        board_id) lm ON (lm.board_id = qbm.id)
    LEFT OUTER JOIN (SELECT
                        COUNT(*) AS total_count
                    from
                        qna_board_mst qbm2
                        left outer join user_mst um2 on (um2.id = qbm2.user_id)
                    where
                        1 = 1
                        <if test="category_id != 99">
                            and qbm2.category_id = #{category_id}
                        </if>
                        <if test="subcategory_id != 99">
                            and qbm2.category_sub_id = #{subcategory_id}
                        </if>
                        <if test='searchValue != null || searchValue !=""'>
                            and (um2.nickname like concat('%', #{searchValue}, '%') or qbm2.title like concat('%', #{searchValue}, '%'))
                        </if>
                        <if test="status_id != 99">
                            and qbm2.status_id = #{status_id}
                        </if>
                    ) pc ON (1=1)
    WHERE
        1 = 1
        <if test="category_id != 99">
            and qbm.category_id = #{category_id}
        </if>
        <if test="subcategory_id != 99">
            and qbm.category_sub_id = #{subcategory_id}
        </if>
        <if test='searchValue != null || searchValue !=""'>
            and (um.nickname like concat('%', #{searchValue}, '%') or qbm.title like concat('%', #{searchValue}, '%'))
        </if>
        <if test="status_id != 99">
            and qbm.status_id = #{status_id}
        </if>

        <if test='show_list == "1"'>
            ORDER BY qbm.create_date DESC
        </if>
        <if test='show_list == "2"'>
            ORDER BY lm.like_count DESC
        </if>
        <if test='show_list == "3"'>
            ORDER BY qbm.view_count DESC
        </if>


    limit
    #{page},10


    </select>



    <select id = "getQnaImgList" parameterType="Integer" resultMap="qna_img_files">
        select
            id,
            qna_board_id,
            origin_name,
            temp_name
        from
            qna_board_img
        where
            qna_board_id = #{boardId}

    </select>

    <select id="updateInfoQna" parameterType="Integer" resultMap="qnaUpdateArticle">
        select
        qbm.id,
        qbm.user_id,
        qbm.menu_id,
        cd.category_name,
        qbm.category_id,
        sd.subcategory_name,
        qbm.category_sub_id,
        sm.status,
        um.nickname,
        qbm.title,
        qbm.info,
        qbm.want_info,
        qbm.price,
        um.user_img,
        ifnull(lm.like_count,0),
        <!--            ifnull(qbm.view_count, 0),-->
        qbm.view_count,
        qbi.temp_name,
        qbm.create_date,
        qbm.update_date
        from
        qna_board_mst qbm
        LEFT OUTER JOIN user_mst um ON(um.id = qbm.user_id)
        LEFT OUTER JOIN category_dtl cd ON(cd.id = qbm.category_id)
        LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = qbm.category_sub_id)
        LEFT OUTER JOIN status_mst sm ON(sm.id = qbm.status_id)
        LEFT OUTER JOIN qna_board_img qbi ON(qbi.qna_board_id = qbm.id)
        LEFT OUTER JOIN (select
        board_id,
        COUNT(*) AS like_count
        from
        like_mst
        GROUP BY
        board_id) lm ON (lm.board_id = qbm.id)
        where
        qbm.id = #{id}
    </select>

    <select id = "getQnaUpdateImgList" parameterType="Integer" resultMap="qna_update_img_files">
        select
        id,
        qna_board_id,
        origin_name,
        temp_name
        from
        qna_board_img
        where
        qna_board_id = #{boardId}

    </select>
<!--    Q&A 결과 데이터-->
    <select id="loadQnaResult" resultType="java.lang.Integer">
        SELECT
            qbm.causer_analysis,
            qbm.solution_plan
        FROM
            qna_board_mst qbm
        WHERE
            id = #{id}
    </select>

    <update id="qnaUpdateArticle" parameterType="com.btsproject.btsproject20221102.domain.QnaUpdateArticle">
        update
            qna_board_mst
        set
            category_id = #{category_id},
            category_sub_id = #{category_sub_id},
            title = #{title},
            info = #{info},
            want_info = #{want_info},
            price = #{price}
        where
            id = #{id}
    </update>
<!--Q&A 답변자 모달-->
    <update id="answererModal"
            parameterType="com.btsproject.btsproject20221102.domain.QnaAnswererModal">
        update
            qna_board_mst
        set
            causer_analysis = #{causer_analysis},
            solution_plan = #{solution_plan}
        where
            id = #{id}

    </update>

    <delete id="updateDelete" parameterType="Integer">
        delete
        from
        qna_board_mst
        where
        id = #{id}
    </delete>

<!--    아티클을 지우는게 아니라 이미지를 지우는 delete 만들기-->

</mapper>