<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.btsproject.btsproject20221102.repository.account.AccountRepository">
    <resultMap id="role" type="com.btsproject.btsproject20221102.domain.Role">
        <result property="id" column="id"></result>
        <result property="role" column="role"></result>
        <result property="role_name" column="role_name"></result>
    </resultMap>

    <resultMap id="user" type="com.btsproject.btsproject20221102.domain.User">
        <result property="id" column="id"></result>
        <result property="username" column="username"></result>
        <result property="oauth_username" column="oauth_username"></result>
        <result property="password" column="password"></result>
        <result property="name" column="name"></result>
        <result property="phone" column="phone"></result>
        <result property="nickname" column="nickname"></result>
        <result property="skill" column="skill"></result>
        <result property="provider" column="provider"></result>
        <result property="user_img" column="user_img"></result>
        <result property="enabled" column="enabled"></result>
        <result property="create_date" column="create_date"></result>
        <result property="update_date" column="update_date"></result>
        <collection property="role" resultMap="role"></collection>
    </resultMap>

    <insert id="save"
            parameterType="com.btsproject.btsproject20221102.domain.User"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into
            user_mst
        values(
            0,
            #{role_id},
            #{username},
            #{oauth_username},
            #{password},
            #{name},
            #{phone},
            #{nickname},
            #{skill},
            #{provider},
            #{user_img},
            #{enabled},
            now(),
            now()
        );
    </insert>

    <insert id="saveKey"
            parameterType="com.btsproject.btsproject20221102.domain.Key"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into
            key_mst(user_id, enabled_key, create_date, update_date)
        values(
            #{user_id},
            #{enabled_key},
            now(),
            now()
        );
    </insert>

    <!-- 포인트 조회 -->
    <select id="point" resultType="com.btsproject.btsproject20221102.domain.Point">
        SELECT
            pm.id,
            um.id,
            um.username,
            pm.total_point,
            pm.create_date

        FROM
            user_mst um
            LEFT OUTER JOIN point_mst pm ON(um.id = pm.user_id)
        WHERE
            um.id = #{user_id}
    </select>

    <!--포인트 충전 -->
    <insert id="pointCharge" parameterType="com.btsproject.btsproject20221102.domain.PointCharge">
        INSERT INTO
            point_dtl(user_id, type, point)
        VALUE(
            #{user_id},
            1,
            #{point}
        )
    </insert>

    <update id="enabledUpdate" parameterType="com.btsproject.btsproject20221102.domain.User">
        update
            user_mst
        set
            enabled = 1,
            update_date = now()
        where
            id = #{id}
    </update>
    <update id="updateAuthenticationStatus" parameterType="integer">
        update
            key_mst
        set
            authentication_status = 1
        where
            id = #{id}
    </update>

    <select id="findUserByEmail" parameterType="String" resultMap="user">
        select
            um.id,
            um.role_id,
            um.username,
            um.oauth_username,
            um.password,
            um.name,
            um.phone,
            um.nickname,
            um.skill,
            um.provider,
            um.user_img,
            um.enabled,

            rm.role,
            rm.role_name,

            um.create_date,
            um.update_date
        from
            user_mst um
            left outer join role_mst rm on (rm.id = um.role_id)
        where
            username = #{username}
    </select>

    <select id="findUserByNickname" parameterType="String" resultMap="user">
        select
        um.id,
        um.role_id,
        um.username,
        um.oauth_username,
        um.password,
        um.name,
        um.phone,
        um.nickname,
        um.skill,
        um.provider,
        um.user_img,
        um.enabled,

        rm.role,
        rm.role_name,

        um.create_date,
        um.update_date
        from
        user_mst um
        left outer join role_mst rm on (rm.id = um.role_id)
        WHERE
            nickname = #{nickname}

    </select>

    <select id="findUserByPhone" parameterType="String" resultMap="user">
        select
        um.id,
        um.role_id,
        um.username,
        um.oauth_username,
        um.password,
        um.name,
        um.phone,
        um.nickname,
        um.skill,
        um.provider,
        um.user_img,
        um.enabled,

        rm.role,
        rm.role_name,

        um.create_date,
        um.update_date
        from
        user_mst um
        left outer join role_mst rm on (rm.id = um.role_id)
        WHERE
            phone = #{phone}
    </select>

    <update id="modifyPassword" parameterType="com.btsproject.btsproject20221102.domain.User">
        UPDATE
            user_mst
        SET
            password = #{password}
        WHERE
            id = #{id}
    </update>
    
    <update id="modifyProfile" parameterType="com.btsproject.btsproject20221102.domain.User">
        UPDATE
            user_mst
        <trim prefix="SET" suffixOverrides=",">
            <if test='nickname != null'>
                nickname = #{nickname},
            </if>
            <if test='phone != null'>
                phone = #{phone},
            </if>
            <if test='skill != null'>
                skill = #{skill},
            </if>
        </trim>
        WHERE
            id = #{id}
    </update>
    <update id="modifyProfileImage" parameterType="com.btsproject.btsproject20221102.domain.UserProfileImage">
        UPDATE
            user_mst
        SET
            user_img = #{temp_name}
        WHERE
            id = #{user_id}
    </update>
    <update id="updateUserOauth2" parameterType="com.btsproject.btsproject20221102.domain.User">
        update
            user_mst
        set
            username = #{username},
            oauth_username = #{oauth_username},
            provider = #{provider},
            phone = #{phone},
            nickname = #{nickname},
            user_img = #{user_img},
            update_date = now()
        where
            id = #{id}
    </update>


    <select id="getAuthenticationKey" resultType="com.btsproject.btsproject20221102.domain.Key">
        select
            id,
            user_id,
            enabled_key,
            authentication_status,
            create_date,
            update_date
        from
            key_mst
        where
            user_id = #{user_id}
        and authentication_status = 0;

    </select>

    <select id="getForgotAuthenticationKey" resultType="com.btsproject.btsproject20221102.domain.Key">
        select
            id,
            user_id,
            enabled_key,
            authentication_status,
            create_date,
            update_date
        from
            key_mst
        where
            user_id = #{user_id}
        and enabled_key = #{enabled_key};

    </select>
    <select id="getImgFile" resultType="com.btsproject.btsproject20221102.domain.User">
        select
            id,
            user_img
        from
            user_mst
        where
            id = #{id}
    </select>

    <select id="userInfo" resultType="com.btsproject.btsproject20221102.domain.UserInfo">
        SELECT
        um.id,
        um.nickname,
        um.user_img,
        um.skill,
        IFNULL(avg(scm.score), 0) AS score_avg
        FROM
        user_mst um
        LEFT OUTER JOIN score_mst scm ON (scm.answerer_id = um.id)
        WHERE
        um.id = #{userId}
        GROUP BY
        um.id
    </select>

    <select id="loadRecentBoardList"
            resultType="com.btsproject.btsproject20221102.domain.LoadRecentboardList">
        SELECT
            um.id,
            um.nickname,
            md.menu_name,
            bm.id AS board_id,
            bm.title,
            bm.create_date
        FROM
            user_mst um
            LEFT OUTER JOIN board_mst bm ON(bm.user_id = um.id)
            LEFT OUTER JOIN menu_dtl md ON(md.id = bm.menu_id)
        WHERE
            bm.user_id = #{userId}

        UNION ALL

        SELECT
            um.id,
            um.nickname,
            md.menu_name,
            qm.id AS board_id,
            qm.title,
            qm.create_date
        FROM
            qna_board_mst qm
            LEFT OUTER JOIN user_mst um ON(um.id = qm.user_id)
            LEFT OUTER JOIN menu_dtl md ON(md.id = qm.menu_id)
        WHERE
            qm.user_id = #{userId}
        ORDER BY
            create_date desc;
    </select>


    <select id="loadMyprofileBoard" resultType="com.btsproject.btsproject20221102.domain.MyprofileBoard">
        SELECT
            bm.user_id,
            bm.id,
            bm.title,
            sd.subcategory_name,
            bm.create_date
        FROM
            board_mst bm
            LEFT OUTER JOIN user_mst um ON(um.id = bm.user_id)
            LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = bm.subcategory_id)
        WHERE
            bm.user_id = #{userId}
        ORDER BY bm.create_date DESC
    </select>
    <select id="loadMyprofileQna" resultType="com.btsproject.btsproject20221102.domain.MyprofileQna">
        SELECT
            qbm.user_id,
            qbm.id,
            qbm.title,
            sm.status,
            sd.subcategory_name,
            qbm.create_date
        FROM
            qna_board_mst qbm
            LEFT OUTER JOIN user_mst um ON(um.id = qbm.user_id)
            LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = qbm.category_sub_id)
            LEFT OUTER JOIN status_mst sm ON(sm.id = qbm.status_id)
        WHERE
            qbm.user_id = #{userId}
        ORDER BY qbm.create_date DESC
    </select>
    <select id="loadMyLikeBoard" resultType="com.btsproject.btsproject20221102.domain.MyLikeBoard">
        SELECT
            lm.from_id,
            lm.board_id,
            bm.title,
            sd.subcategory_name,
            lm.create_date
        FROM
            like_mst lm
            LEFT OUTER JOIN board_mst bm ON(bm.id = lm.board_id)
            LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = bm.subcategory_id)
        WHERE
            from_id = #{userId}
        ORDER BY lm.create_date DESC
    </select>

    <select id="loadMyLikeQna" resultType="com.btsproject.btsproject20221102.domain.MyLikeQna">
        SELECT
            qlm.from_id,
            qlm.qna_board_id,
            qbm.title,
            sd.subcategory_name,
            sm.status,
            qlm.create_date
        FROM
            qna_like_mst qlm
            LEFT OUTER JOIN qna_board_mst qbm ON(qbm.id = qlm.qna_board_id)
            LEFT OUTER JOIN subcategory_dtl sd ON(sd.id = qbm.category_sub_id)
            LEFT OUTER JOIN status_mst sm ON(sm.id = qbm.status_id)
        WHERE
            from_id = #{userId}
        ORDER BY qlm.create_date DESC
    </select>

    <delete id="deleteUser" parameterType="com.btsproject.btsproject20221102.domain.User">
        delete
        from
            user_mst
        where
            id = #{id}
    </delete>

</mapper>